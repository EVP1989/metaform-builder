[{"C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\index.tsx":"1","C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\reportWebVitals.ts":"2","C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\App.tsx":"3","C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\components\\generic\\HeaderNav.tsx":"4","C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\styles\\theme.ts":"5","C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\model\\metaformExampleJSON.ts":"6","C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\components\\FormComponents.tsx":"7","C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\components\\ListOfComponents.tsx":"8","C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\model\\formComponentDustyWarehouse.ts":"9","C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\components\\JsonPreview.tsx":"10","C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\components\\Preview.tsx":"11","C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\components\\generic\\HeaderNavTest.tsx":"12"},{"size":517,"mtime":1611156951548,"results":"13","hashOfConfig":"14"},{"size":440,"mtime":1611156951549,"results":"15","hashOfConfig":"14"},{"size":803,"mtime":1612264311560,"results":"16","hashOfConfig":"14"},{"size":1983,"mtime":1612262684904,"results":"17","hashOfConfig":"14"},{"size":1558,"mtime":1612120849998,"results":"18","hashOfConfig":"14"},{"size":2494,"mtime":1612175938915,"results":"19","hashOfConfig":"14"},{"size":3508,"mtime":1612207949114,"results":"20","hashOfConfig":"14"},{"size":2624,"mtime":1612208332081,"results":"21","hashOfConfig":"14"},{"size":1886,"mtime":1612202949709,"results":"22","hashOfConfig":"14"},{"size":518,"mtime":1612264790925,"results":"23","hashOfConfig":"14"},{"size":484,"mtime":1612264681752,"results":"24","hashOfConfig":"14"},{"size":2393,"mtime":1612282489466,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"oxu282",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\index.tsx",[],["54","55"],"C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\reportWebVitals.ts",[],"C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\App.tsx",["56","57","58","59","60"],"import React, { useState } from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport ListOfComponents from './components/ListOfComponents';\r\nimport HeaderNav from './components/generic/HeaderNav';\r\n\r\n//Material-UI components\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\n\r\n//Styles\r\nimport metaFormBuilder from \"./styles/theme\";\r\nimport { responsiveFontSizes } from '@material-ui/core';\r\nimport HeaderNavTest from './components/generic/HeaderNavTest';\r\n\r\n/**\r\n * Material UI's automated responsive font sizes\r\n */\r\nconst theme = responsiveFontSizes(metaFormBuilder);\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <Router>\r\n      <ThemeProvider theme={theme}>\r\n        <HeaderNavTest /> \r\n  \r\n      </ThemeProvider>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\components\\generic\\HeaderNav.tsx",["61","62","63"],"C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\styles\\theme.ts",["64"],"import { createMuiTheme, responsiveFontSizes } from \"@material-ui/core\";\r\n\r\nlet theme = createMuiTheme();\r\ntheme = responsiveFontSizes(theme);\r\n\r\nexport default createMuiTheme({\r\n    palette: {\r\n      primary: {\r\n        main: \"#1068B3\",\r\n        dark: \"#1076cc\"\r\n      },\r\n      secondary: { \r\n        main: \"#fff\",\r\n        dark: \"#eee\"\r\n      },\r\n      background: {\r\n        default: \"#ffffff\",\r\n        paper: \"#F5EFEA\"\r\n      },\r\n      text: {\r\n        primary: \"#000000\",\r\n        secondary: \"#26201E\",\r\n        disabled: \"#ddd\",\r\n        hint: \"#eee\"\r\n      }\r\n    },\r\n    typography: {\r\n      // Tells Material UI the font-size on the html element.\r\n      htmlFontSize: 16,\r\n      fontFamily: \"Open Sans, sans-serif\",\r\n      h1: {\r\n        fontFamily: \"Open Sans, sans-serif\",\r\n        fontWeight: 900\r\n      },\r\n      h2: {\r\n        fontFamily: \"Open Sans, sans-serif\",\r\n        fontWeight: 600\r\n      },\r\n      h3: {\r\n        fontFamily: \"Open Sans, sans-serif\",\r\n        fontWeight: 600\r\n      },\r\n      h4: {\r\n        fontFamily: \"Open Sans, sans-serif\",\r\n        fontWeight: 600\r\n      },\r\n      h5: {\r\n        fontFamily: \"Open Sans, sans-serif\",\r\n        fontWeight: 600\r\n      },\r\n      h6: {\r\n        fontFamily: \"Open Sans, sans-serif\",\r\n        fontWeight: 600\r\n      },\r\n      body1: {\r\n        fontFamily: \"Rubik, sans-serif\",\r\n        fontWeight: \"normal\"\r\n      },\r\n      body2: {\r\n        fontFamily: \"Open Sans, sans-serif\",\r\n        fontWeight: \"normal\",\r\n        fontSize: 16,\r\n        lineHeight: \"1.8rem\"\r\n      },\r\n    }\r\n  });","C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\model\\metaformExampleJSON.ts",[],"C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\components\\FormComponents.tsx",["65"],"import { createStyles, List, ListItem, ListItemText, makeStyles, TextField, Theme, Typography } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Delete, Home } from '@material-ui/icons';\r\nimport React, { useRef } from 'react';\r\nimport '../styles/FormItems.css';\r\n\r\n//TODO: Make mutable list of that can add/remove form items\r\n//TODO: Make method that writes list to json file\r\n\r\n//DnD items based on github repo: https://github.com/Gaurav2048/React-DnD-Adv\r\n\r\n//Styles\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n      maxWidth: 250,\r\n    },\r\n    components: {\r\n      backgroundColor: theme.palette.background.default,\r\n        \r\n    },\r\n    icon: {\r\n      margin: theme.spacing(1, 2, 1),\r\n    },\r\n  }),\r\n);\r\n\r\ninterface Props {\r\n  setFormBlockList : (newFormBlockList : any[]) => void\r\n  formBlockList : any[],\r\n}\r\n\r\n/**\r\n * Renders form according to given component list\r\n * @param props \r\n */\r\nconst FormComponents : React.FC<any> = (props : Props) => {\r\n\r\n  const formBlockList = props.formBlockList;\r\n\r\n  const classes = useStyles();\r\n\r\n  const draggingItem = useRef<number | null>(null);\r\n  const dragOverItem = useRef<number | null>(null);\r\n\r\n  const handleDragStart = (e : any, position :number) => {\r\n      draggingItem.current = position;\r\n  };\r\n\r\n  const handleDragEnter = (e : any, position : number) => {\r\n      dragOverItem.current = position;\r\n      const newFormBlockList = [...formBlockList];\r\n      if(draggingItem.current != null) {\r\n          const draggingItemContent = newFormBlockList[draggingItem.current];\r\n          newFormBlockList.splice(draggingItem.current, 1);\r\n          newFormBlockList.splice(dragOverItem.current, 0, draggingItemContent);\r\n      }\r\n      draggingItem.current = dragOverItem.current;\r\n      dragOverItem.current = null;\r\n      props.setFormBlockList(newFormBlockList);\r\n  };\r\n\r\n  /**\r\n   * Updates form input data (TESTING)\r\n   * \r\n   * @param input \r\n   * @param index \r\n   */\r\n  const handleInputChange = (input : any, index : number) => {\r\n\r\n      let placeholder  = input.target.value;\r\n\r\n      const newFormBlockList = [...formBlockList];\r\n\r\n      newFormBlockList[index].placeholder = placeholder;\r\n\r\n      props.setFormBlockList(newFormBlockList);\r\n\r\n  }\r\n\r\n  /**\r\n   * Deletes form component from list\r\n   * @param index \r\n   */\r\n  const deleteFormComponent = (index : number) : void => {\r\n\r\n    const newFormBlockList = [...formBlockList];\r\n\r\n    newFormBlockList.splice(index,1);\r\n\r\n    props.setFormBlockList(newFormBlockList);\r\n\r\n  }\r\n\r\n  //TODO: Use methods to return needed elements\r\n  return (\r\n  <>\r\n  <Grid item md={12}>\r\n    <Typography variant=\"h2\" >\r\n      Uusi Lomake\r\n    </Typography>\r\n    <List className={classes.root}>\r\n        {props.formBlockList.map((item : any, index : number) => (\r\n        <ListItem\r\n          onDragStart={(e) => handleDragStart(e, index)}\r\n          onDragEnter={(e) => handleDragEnter(e, index)}\r\n          onDragOver={(e) => e.preventDefault()}\r\n          key={index} draggable\r\n          className={classes.components}\r\n          >\r\n          <ListItemText>\r\n          <Delete color=\"primary\" onClick={(e) => deleteFormComponent(index)}/>\r\n            <TextField label={index} variant=\"outlined\" value={item.placeholder} onChange={(input) => handleInputChange(input, index) }/>\r\n          </ListItemText>\r\n        </ListItem>\r\n        ))}\r\n    </List> \r\n  </Grid>\r\n  </>\r\n  );\r\n\r\n};\r\n\r\nexport default FormComponents;","C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\components\\ListOfComponents.tsx",[],"C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\model\\formComponentDustyWarehouse.ts",[],"C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\components\\JsonPreview.tsx",[],"C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\components\\Preview.tsx",[],"C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\components\\generic\\HeaderNavTest.tsx",["66"],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":1,"column":17,"nodeType":"73","messageId":"74","endLine":1,"endColumn":25},{"ruleId":"71","severity":1,"message":"75","line":2,"column":35,"nodeType":"73","messageId":"74","endLine":2,"endColumn":40},{"ruleId":"71","severity":1,"message":"76","line":2,"column":42,"nodeType":"73","messageId":"74","endLine":2,"endColumn":46},{"ruleId":"71","severity":1,"message":"77","line":3,"column":8,"nodeType":"73","messageId":"74","endLine":3,"endColumn":24},{"ruleId":"71","severity":1,"message":"78","line":4,"column":8,"nodeType":"73","messageId":"74","endLine":4,"endColumn":17},{"ruleId":"71","severity":1,"message":"76","line":4,"column":8,"nodeType":"73","messageId":"74","endLine":4,"endColumn":12},{"ruleId":"71","severity":1,"message":"77","line":15,"column":8,"nodeType":"73","messageId":"74","endLine":15,"endColumn":24},{"ruleId":"71","severity":1,"message":"79","line":25,"column":7,"nodeType":"73","messageId":"74","endLine":25,"endColumn":19},{"ruleId":"71","severity":1,"message":"80","line":4,"column":29,"nodeType":"73","messageId":"74","endLine":4,"endColumn":34},{"ruleId":"71","severity":1,"message":"81","line":3,"column":18,"nodeType":"73","messageId":"74","endLine":3,"endColumn":22},{"ruleId":"71","severity":1,"message":"82","line":21,"column":38,"nodeType":"73","messageId":"74","endLine":21,"endColumn":43},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'Link' is defined but never used.","'ListOfComponents' is defined but never used.","'HeaderNav' is defined but never used.","'LinkBehavior' is assigned a value but never used.","'theme' is assigned a value but never used.","'Home' is defined but never used.","'other' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]