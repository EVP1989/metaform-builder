[{"C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\index.tsx":"1","C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\reportWebVitals.ts":"2","C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\App.tsx":"3","C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\styles\\theme.ts":"4","C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\model\\metaformJSON.tsx":"5","C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\components\\generic\\HeaderNav.tsx":"6","C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\components\\JsonPreview.tsx":"7","C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\components\\Preview.tsx":"8","C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\components\\ListOfComponents.tsx":"9","C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\components\\FormComponents.tsx":"10","C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\model\\formComponentDustyWarehouse.tsx":"11"},{"size":517,"mtime":1611156951548,"results":"12","hashOfConfig":"13"},{"size":440,"mtime":1611156951549,"results":"14","hashOfConfig":"13"},{"size":1193,"mtime":1613409177610,"results":"15","hashOfConfig":"13"},{"size":1558,"mtime":1612364717990,"results":"16","hashOfConfig":"13"},{"size":582,"mtime":1614514171134,"results":"17","hashOfConfig":"13"},{"size":2593,"mtime":1613409177615,"results":"18","hashOfConfig":"13"},{"size":1492,"mtime":1614534477740,"results":"19","hashOfConfig":"13"},{"size":484,"mtime":1613409177613,"results":"20","hashOfConfig":"13"},{"size":5012,"mtime":1614536220440,"results":"21","hashOfConfig":"13"},{"size":8943,"mtime":1615716818661,"results":"22","hashOfConfig":"13"},{"size":5032,"mtime":1614514171134,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"oxu282",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\index.tsx",[],["50","51"],"C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\reportWebVitals.ts",[],"C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\App.tsx",["52"],"import React, { useEffect, useState } from 'react';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport HeaderNav from './components/generic/HeaderNav';\r\nimport MetaformJSON from './model/metaformJSON';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n//Material-UI\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\n//Styles\r\nimport metaFormBuilder from \"./styles/theme\";\r\nimport { responsiveFontSizes } from '@material-ui/core';\r\n\r\n/**\r\n * Material UI's automated responsive font sizes\r\n */\r\nconst theme = responsiveFontSizes(metaFormBuilder);\r\n\r\nfunction App() {\r\n\r\n  /**\r\n   * Initialize form\r\n   * TODO: check local storige for existing one\r\n   */\r\n  const [metaFormJson, setMetaFormJson] = useState<any>(MetaformJSON);\r\n\r\n  /**\r\n   * Generate unique id for the form\r\n   */\r\n  useEffect(() => {\r\n\r\n    const newFormJson = {...metaFormJson};\r\n\r\n    let newId = uuidv4();\r\n\r\n    newFormJson.id = newId;\r\n    \r\n    setMetaFormJson(newFormJson);\r\n\r\n  }, []);\r\n\r\n  return (\r\n    <Router>\r\n      <ThemeProvider theme={theme}>\r\n        <HeaderNav setMetaFormJson={setMetaFormJson} metaFormJson={metaFormJson}/> \r\n      </ThemeProvider>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\styles\\theme.ts",["53"],"import { createMuiTheme, responsiveFontSizes } from \"@material-ui/core\";\r\n\r\nlet theme = createMuiTheme();\r\ntheme = responsiveFontSizes(theme);\r\n\r\nexport default createMuiTheme({\r\n    palette: {\r\n      primary: {\r\n        main: \"#1068B3\",\r\n        dark: \"#1076cc\"\r\n      },\r\n      secondary: { \r\n        main: \"#fff\",\r\n        dark: \"#eee\"\r\n      },\r\n      background: {\r\n        default: \"#ffffff\",\r\n        paper: \"#F5EFEA\"\r\n      },\r\n      text: {\r\n        primary: \"#000000\",\r\n        secondary: \"#26201E\",\r\n        disabled: \"#ddd\",\r\n        hint: \"#eee\"\r\n      }\r\n    },\r\n    typography: {\r\n      // Tells Material UI the font-size on the html element.\r\n      htmlFontSize: 16,\r\n      fontFamily: \"Open Sans, sans-serif\",\r\n      h1: {\r\n        fontFamily: \"Open Sans, sans-serif\",\r\n        fontWeight: 900\r\n      },\r\n      h2: {\r\n        fontFamily: \"Open Sans, sans-serif\",\r\n        fontWeight: 600\r\n      },\r\n      h3: {\r\n        fontFamily: \"Open Sans, sans-serif\",\r\n        fontWeight: 600\r\n      },\r\n      h4: {\r\n        fontFamily: \"Open Sans, sans-serif\",\r\n        fontWeight: 600\r\n      },\r\n      h5: {\r\n        fontFamily: \"Open Sans, sans-serif\",\r\n        fontWeight: 600\r\n      },\r\n      h6: {\r\n        fontFamily: \"Open Sans, sans-serif\",\r\n        fontWeight: 600\r\n      },\r\n      body1: {\r\n        fontFamily: \"Rubik, sans-serif\",\r\n        fontWeight: \"normal\"\r\n      },\r\n      body2: {\r\n        fontFamily: \"Open Sans, sans-serif\",\r\n        fontWeight: \"normal\",\r\n        fontSize: 16,\r\n        lineHeight: \"1.8rem\"\r\n      },\r\n    }\r\n  });","C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\model\\metaformJSON.tsx",[],"C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\components\\generic\\HeaderNav.tsx",["54"],"import React from 'react';\r\nimport JsonPreview from '../JsonPreview';\r\nimport ListOfComponents from '../ListOfComponents';\r\nimport Preview from '../Preview';\r\n//Material-UI \r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport { makeStyles, Theme } from '@material-ui/core';\r\n//Material-UI icons\r\nimport FormatAlignJustifyIcon from '@material-ui/icons/FormatAlignJustify';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport CodeIcon from '@material-ui/icons/Code';\r\n\r\ninterface Props {\r\n    metaFormJson : any,\r\n    setMetaFormJson : (newMetaFormJson: any) => void\r\n  }\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: any;\r\n  value: any;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <>\r\n      {value === index && (\r\n        <>\r\n          {children}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\ninterface LinkTabProps {\r\n  label?: string;\r\n  href?: string;\r\n  icon? : any\r\n}\r\n\r\nfunction LinkTab(props: LinkTabProps) {\r\n  return (\r\n    <Tab\r\n      component=\"a\"\r\n      onClick={(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\r\n        event.preventDefault();\r\n      }}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n}));\r\n\r\nexport default function HeaderNav( props : Props) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" color=\"secondary\">\r\n        <Tabs\r\n          variant=\"fullWidth\"\r\n          value={value}\r\n          onChange={handleChange}\r\n          aria-label=\"nav tabs example\"\r\n        >\r\n          <LinkTab icon={<FormatAlignJustifyIcon/>}  label=\"Lomake\" />\r\n          <LinkTab icon={<VisibilityIcon />} label=\"Esikatselu\"/>\r\n          <LinkTab icon={<CodeIcon />} label=\"JSON\"  />\r\n        </Tabs>\r\n      </AppBar>\r\n      <TabPanel value={value} index={0}>\r\n        <ListOfComponents setMetaFormJson={props.setMetaFormJson} metaFormJson={props.metaFormJson}/>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        <Preview/>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={2}>\r\n        <JsonPreview metaFormJson={props.metaFormJson}/>\r\n      </TabPanel>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\components\\JsonPreview.tsx",[],"C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\components\\Preview.tsx",[],"C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\components\\ListOfComponents.tsx",[],"C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\components\\FormComponents.tsx",[],"C:\\Metatavu\\Metaform\\metaform-builder\\metaform-builder\\metaform-builder\\src\\model\\formComponentDustyWarehouse.tsx",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":38,"column":6,"nodeType":"61","endLine":38,"endColumn":8,"suggestions":"62"},{"ruleId":"63","severity":1,"message":"64","line":4,"column":29,"nodeType":"65","messageId":"66","endLine":4,"endColumn":34},{"ruleId":"63","severity":1,"message":"67","line":27,"column":38,"nodeType":"65","messageId":"66","endLine":27,"endColumn":43},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'metaFormJson'. Either include it or remove the dependency array.","ArrayExpression",["70"],"@typescript-eslint/no-unused-vars","'theme' is assigned a value but never used.","Identifier","unusedVar","'other' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},"Update the dependencies array to be: [metaFormJson]",{"range":"73","text":"74"},[966,968],"[metaFormJson]"]